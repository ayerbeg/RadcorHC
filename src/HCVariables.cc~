#include "HCVariables.hh"
#include "Rtypes.h"

#include <iostream>
#include "string.h"
#include "string"
#include <fstream>
#include <sstream>

#include "TString.h"

using namespace std;


// double space;
// double max_ang;
// double min_ang;
// double ang_sep;


HCVariables::HCVariables()
{
  cout << "<HCVariables::HCVariables>: LOADING" << endl;
  //  inputfile = "options.ini";
}

HCVariables::~HCVariables()
{
  cout << "<HCVariables::~HCVariables>: END" << endl;
}


int
HCVariables::LoadFromFile(TString FileName)
{
  // The use of this algorithm is much better in C++ style
  // where each variable can be called defining the class
  // and accessing the methods as Variable-><option>
  // For the moment, it uses global variables.
  // Nevertheless, I will read them once and them move them throught
  // the code as arguments.

  
  ifstream infile;
  string line;
  infile.open(FileName);
  if (infile)
    {
      while (!infile.eof())
	{
	  if (getline(infile,line))
	    {
	   
	      string buf;
	      string wert;
	      TString TSwert;
	      int integerwert;
	      double doublewert;
	      string boolewert;
	      
	      stringstream ss(line);
	      //	      cout << ">" << line << endl;
	      ss >> buf;
	      if (buf == "project")	 
	     	{
		  ss >> TSwert;
		  nameProject = TSwert;
		}
	      
	      if (buf == "Ebeam")	 
	     	{			
	      	  ss >> doublewert;
		  gBeam = doublewert;
		}

	      if (buf == "angle")	 
	     	{			
	      	  ss >> doublewert;
		  gTheta = doublewert;
		}
	      if (buf == "p_min")	 
	     	{			
	      	  ss >> doublewert;
		  Ep_min = doublewert;
		}
	      if (buf == "W_threshold")	 
	     	{			
	      	  ss >> doublewert;
		  WThreshold = doublewert;
		}
	      if (buf == "plotPS")	 
	     	{			
	      	  ss >> boolewert;
		  plotPhaseSpace = ReadBoolean(boolewert);
		}
	      if (buf == "plotSF")	 
	     	{			
	      	  ss >> boolewert;
		  plotStructureF = ReadBoolean(boolewert);
		}
	      if (buf == "plotSFrep")	 
	     	{			
	      	  ss >> wert;
		  plotStructureFrep = wert;
		}
	      if (buf == "plotXSHe3")	 
	     	{			
	      	  ss >> boolewert;
		  plotCrossSecHe3 =  ReadBoolean(boolewert);
		}
	      if (buf == "target")	 
	     	{
		  ss >> TSwert;
		  nucleon = TSwert;
		}

	      if (buf == "IPOL")	 
		{
		  ss >> integerwert;
		  varIPOL =integerwert;
	      	}

	      if (buf == "IA1")
	       	{
		  ss >> integerwert;
		  varIA1 =integerwert;
		}
		
	      if (buf == "AsymChoice")
		{
		  ss >> integerwert;
		  varAsym =integerwert;
		}

	      if (buf == "SFChoice")
		{
		  ss >> integerwert;
		  varSFC = integerwert;	
		}

	      if (buf == "YoniIndex")
		{
		  ss >> integerwert;
		  varYoniIndex = integerwert;	
		}
	      if (buf == "reso")
		{
		  ss >> wert;
		  varreso = wert;	
		}
	    }
	}
    }


  return 1;
}

// This function is auxiliary to the Variables function
bool HCVariables:: ReadBoolean(string Value)
{
  cout<<"RB: "<<Value<<endl;
  
  if ((Value=="true")
      || (Value=="True")
      || (Value=="TRUE")
      || (Value=="1"))
    {return true;}
  else
    {return false;}
}




HCVariables *Variables=NULL;
